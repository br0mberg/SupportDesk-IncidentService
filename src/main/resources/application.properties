spring.application.name=incident-service
server.port=8081
logging.level.org.springframework.security=DEBUG

spring.datasource.url=jdbc:postgresql://postgres:5432/incident_service
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=true

spring.liquibase.change-log=classpath:db/changelog/db.changelog-master.yaml

keycloak.realm=IncidentManagement
keycloak.resource=incident-service
keycloak.public-client=true
jwt.token.user-id.field-name=user_id

spring.security.oauth2.resourceserver.jwt.issuer-uri=http://keycloak:8080/realms/IncidentManagement

spring.kafka.bootstrap-servers=kafka1:9092
spring.kafka.producer.retries=3
spring.kafka.producer.enable-idempotence=true
spring.kafka.producer.acks=all
spring.kafka.producer.delivery-timeout=120000
spring.kafka.producer.retry-backoff=1000
spring.kafka.producer.linger-ms=10
kafka.delete-image.topic=delete-image-topic

grpc.client.image-service.host=image-service
grpc.client.image-service.port=50051
grpc.client.user-service.host=user-service
grpc.client.user-service.port=50052

# Actuator
management.endpoints.web.exposure.include=health,metrics,prometheus,info
management.endpoint.health.show-details=always
management.endpoint.prometheus.enabled=true

# Prometheus
management.prometheus.metrics.export.enabled=true
management.metrics.tags.application=${spring.application.name}
management.prometheus.metrics.export.step=1m

# gRPC metrics
management.metrics.enable.grpc=true
grpc.server.health-service.type=ACTUATOR
grpc.metricsA66Enabled=true

management.metrics.distribution.percentiles.grpc.server=0.5,0.9,0.95
management.metrics.distribution.percentiles.grpc.client=0.5,0.9,0.95
